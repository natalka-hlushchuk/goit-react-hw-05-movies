{"version":3,"file":"static/js/310.6d8e746a.chunk.js","mappings":"4RAEaA,E,OAAeC,GAAAA,IAAH,qL,SCqCzB,EAhCe,WAAO,IAAD,EACnB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAK,UAAGH,EAAaI,IAAI,gBAApB,QAAgC,GAmB3C,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,gHAE2BC,EAAAA,EAAAA,IAAUH,GAFrC,gBAEYI,EAFZ,EAEYA,KACRT,EAAUS,EAAKC,SAHnB,gDAKI,IAAIC,MAAMC,IAAAA,OAAAA,QAAA,kBALd,yBAOIR,GAAW,GAPf,6EALc,sBACA,KAAVC,IAGJD,GAAW,GAJG,mCAedS,GACD,GAAE,CAACR,KAEF,UAACT,EAAD,YACE,SAAC,KAAD,IACCO,IAAW,SAAC,KAAD,IACXJ,IAAU,SAAC,KAAD,CAAYA,OAAQA,MAGpC,C,+LCrCDe,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAEL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,EAAAA,IAAA,iCACKC,EADL,2BAFpB,cAEGE,EAFH,yBAKIA,GALJ,sCAOG,IAAIN,MAAJ,MAPH,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gGAEoBL,EAAAA,EAAAA,IAAA,gBACZK,EADY,oBACEJ,EADF,oBAFpB,cAEGE,EAFH,yBAKIA,GALJ,sCAOG,IAAIN,MAAJ,MAPH,gFAWA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAAuBD,GAAvB,gGAEoBL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACUJ,EADV,oBAFpB,cAEGE,EAFH,yBAKIA,GALJ,sCAOG,IAAIN,MAAJ,MAPH,gFAYA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA0BF,GAA1B,gGAEoBL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACUJ,EADV,oBAFpB,cAEGE,EAFH,yBAKIA,GALJ,sCAOG,IAAIN,MAAJ,MAPH,gFAWA,SAAeH,EAAtB,+CAAO,OAAP,oBAAO,WAAyBc,GAAzB,gGAEoBR,EAAAA,EAAAA,IAAA,gCACIC,EADJ,qEACoEO,IAHxF,cAEGL,EAFH,yBAKIA,GALJ,sCAOG,IAAIN,MAAJ,MAPH,gFAbPS,EAAQ,M","sources":["pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesStyled = styled.div`\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  font-weight: 700;\n  font-size: 28px;\n  line-height: 1.17;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { getMovies } from 'service/api';\nimport { MoviesList, SearchForm, Loader } from '../../components/index';\nimport { MoviesStyled } from 'pages/Movies/Movies.styled';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    setLoading(true);\n    async function findMovies() {\n      try {\n        const { data } = await getMovies(query);\n        setMovies(data.results);\n      } catch (error) {\n        new Error(Notiflix.Notify.failure(`Request error`));\n      } finally {\n        setLoading(false);\n      }\n    }\n    findMovies();\n  }, [query]);\n  return (\n    <MoviesStyled>\n      <SearchForm />\n      {loading && <Loader />}\n      {movies && <MoviesList movies={movies} />}\n    </MoviesStyled>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '1c132fe45ecd58a684e8db3e61164617';\n\nexport async function findPopularMovie() {\n  try {\n    const response = await axios.get(\n      `/movie/popular?api_key=${KEY}&language=en-US&page=1`\n    );\n    return response;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getMovieDetails(id) {\n  try {\n    const response = await axios.get(\n      `movie/${id}?api_key=${KEY}&language=en-US`\n    );\n    return response;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getCast(id) {\n  try {\n    const response = await axios.get(\n      `movie/${id}/credits?api_key=${KEY}&language=en-US`\n    );\n    return response;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\ngetCast(56774);\n\nexport async function getReviews(id) {\n  try {\n    const response = await axios.get(\n      `movie/${id}/reviews?api_key=${KEY}&language=en-US`\n    );\n    return response;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nexport async function getMovies(movie) {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&limit=20&query=${movie}`\n    );\n    return response;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n"],"names":["MoviesStyled","styled","useState","movies","setMovies","useSearchParams","searchParams","loading","setLoading","query","get","useEffect","getMovies","data","results","Error","Notiflix","findMovies","axios","KEY","findPopularMovie","response","getMovieDetails","id","getCast","getReviews","movie"],"sourceRoot":""}